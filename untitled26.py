# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BEYat3iHdUV_iQhw32WbCTDvGOzj6X9B
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

df_index=pd.read_csv("economic_index.csv")

df_index.head()



df_index.drop(columns=["Unnamed: 0","year","month"],axis=1,inplace=True)

df_index.isnull().sum()

import seaborn as sns
sns.pairplot(df_index)

df_index.corr()

plt.scatter(df_index['interest_rate'],df_index['unemployment_rate'],color='r')
plt.xlabel("Interest rate")
plt.ylabel("unemployment rate")

X=df_index.iloc[:,:-1]
y=df_index.iloc[:,-1]

X.head()

# train test split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)

import seaborn as sns

sns.regplot(x=df_index['interest_rate'], y=df_index['unemployment_rate'])

sns.regplot(x=df_index['index_price'], y=df_index['unemployment_rate'])

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)

X_train

from sklearn.linear_model import LinearRegression
regression=LinearRegression()

regression.fit(X_train,y_train)

## cross validation
from sklearn.model_selection import cross_val_score
validation_score=cross_val_score(regression,X_train,y_train,scoring='neg_mean_squared_error',
                                cv=3)

np.mean(validation_score)

y_pred=regression.predict(X_test)

y_pred

from sklearn.metrics import mean_absolute_error,mean_squared_error
mse=mean_squared_error(y_test,y_pred)
mae=mean_absolute_error(y_test,y_pred)
rmse=np.sqrt(mse)
print(mse)
print(mae)
print(rmse)

from sklearn.metrics import r2_score
score=r2_score(y_test,y_pred)
print(score)
#display adjusted R-squared
print(1 - (1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1))

"""### **Assumptions**"""

plt.scatter(y_test,y_pred)

residuals=y_test-y_pred
print(residuals)

sns.displot(residuals,kind='kde')

plt.scatter(y_pred,residuals)

import statsmodels.api as sm
model=sm.OLS(y_train,X_train).fit()

model.summary()

print(regression.coef_)